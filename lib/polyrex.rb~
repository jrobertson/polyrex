#!/usr/bin/env ruby

# file: polyrex.rb

#require 'open-uri'
require 'polyrex-schema'
#require 'line-tree'
require 'polyrex-objects'
require 'polyrex-createobject'
require 'polyrex-object-methods'
require 'recordx-xslt'
#require 'rexle'
#require 'recordx'
#require 'rxraw-lineparser'
#require 'yaml'
require 'dynarex'

module Enumerable
  def repeated_permutation(size, &blk)
    f = proc do |memo, &blk|
      if memo.size == size
        blk.call memo
      else
        self.each do |i|
          f.call memo + [i], &blk
        end
      end
    end

    if block_given?
      f.call [], &blk
    else
      Enumerator.new(f, :call, [])
    end
  end
end


class Polyrex
  attr_accessor :summary_fields, :xslt_schema, :id_counter, 
                :schema, :type, :delimiter

  def initialize(location=nil, opt={})

    options = {id_counter: '1'}.merge opt

    @id_counter = options[:id_counter]
    @format_masks = []
    @delimiter = '' 
    
    if location then

      self.method(:schema=).call(options[:schema]) if options[:schema]

      openx(location)

      if options[:schema] then

        fields = @schema[/\/.*/].scan(/\[([^\]]+)/).map \
          {|x| x.first.split(',').map(&:strip)}
        refresh_records self.records, fields, 0

      end


      summary_h = Hash[*@doc.root.xpath("summary/*").map {|x| [x.name, x.text]}.flatten]      
      #@summary = OpenStruct.new summary_h

      @summary = RecordX.new summary_h
      @summary_fields = summary_h.keys.map(&:to_sym)
    end
    
    @polyrex_xslt = RecordxXSLT.new
  end

  def add(pxobj)
    self.record.add pxobj.node
  end

  def content(options={})
    CGI.unescapeHTML(to_xml(options))
  end

  def create(id: nil)
      # @create is a PolyrexCreateObject, @parent_node is a Rexle::Element pointing to the current record
    
    @create.id = id || @id_counter
    @create.record = @parent_node.name == 'records' ? @parent_node.root : @parent_node.root.element('records')
    @create
  end

  def delete(x=nil)

    if x.to_i.to_s  == x.to_s then
      @doc.root.delete("//[@id='#{x}'")
    else
      @doc.root.xpath(x).each(&:delete)
    end
  end
  
  def delimiter=(separator)

    @delimiter = separator

    @format_masks.map! do |format_mask|
      format_mask.to_s.gsub(/\s/, separator)
    end
  end  

  def record()
    @parent_node
  end

  def to_xml(options={})
    refresh_summary
    @doc.to_s(options)
  end

  def save(filepath=nil, options={})    
    refresh_summary
    filepath ||= @local_filepath
    @local_filepath = filepath
    xml = @doc.to_s(options)
    buffer = block_given? ? yield(xml) : xml
    File.open(filepath,'w'){|f| f.write buffer}    
  end
  
  # -- start of crud methods -- 

  def find_by_id(id)
    @parent_node = @doc.root.element("//[@id='#{id}']")
    @objects[@parent_node.name].new(@parent_node, id: @id)
  end

  def id(id)
    @parent_node = @doc.root.element("//[@id='#{id}']")
    self
  end

  # -- end of crud methods --
  
  # -- start of full text edit methods
  def format_masks
    @format_masks
  end 
  
  def parse(buffer='', options={})

    buffer = yield if block_given?          
    string_parse buffer.clone, options
    self
  end    
  
  alias import parse

  def element(s)
    @doc.root.element(s)
  end
  
  def records
    @doc.root.xpath("records/*").map do |record|      
      @objects_a[0].new(record)
    end
  end

  def schema=(s)

    openx(s)
    summary_h = Hash[*@doc.root.xpath("summary/*").map {|x| [x.name, x.text]}.flatten]      
    #@summary = OpenStruct.new summary_h

    @summary = RecordX.new summary_h
    @summary_fields = summary_h.keys.map(&:to_sym)    
    self
  end
  
  def summary
    @summary
  end

  def to_a()
    recordx_map @doc.root
  end
  
  def to_dynarex()
    root = @doc.root.deep_clone

    summary = root.element('summary')
    e = summary.element('schema')
    e.text = e.text[/[^\/]+\/[^\/]+/].sub(/(\/\w+)\[([^\]]+)\]/,'\1(\2)')
    summary.delete('format_mask')
    summary.element('recordx_type').text = 'dynarex'

    summary.add root.element('records/*/summary/format_mask').clone
    root.xpath('records/*/summary/format_mask').each(&:delete)

xsl_buffer =<<EOF
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output encoding="UTF-8"
            indent="yes"
            omit-xml-declaration="yes"/>

  <xsl:template match="*">
    <xsl:element name="{name()}">
    <xsl:element name="summary">
      <xsl:for-each select="summary/*">
        <xsl:copy-of select="."/>
      </xsl:for-each>
    </xsl:element>
    <xsl:element name="records">
      <xsl:for-each select="records/*">
        <xsl:element name="{name()}">
          <xsl:copy-of select="summary/*"/>
        </xsl:element>
      </xsl:for-each>
    </xsl:element>
    </xsl:element>
  </xsl:template>
</xsl:stylesheet>
EOF
    xslt  = Nokogiri::XSLT(xsl_buffer)
    buffer = xslt.transform(Nokogiri::XML(root.xml)).to_s
    Dynarex.new buffer

  end

  def to_s()

    def build(records, indent=0)

      records.map do |item|

        summary = item.element 'summary'
        format_mask = summary.text 'format_mask'
        line = format_mask.gsub(/\[![^\]]+\]/){|x| summary.text x[2..-2]}

        records = item.element('records').elements.to_a
        line = line + "\n" + build(records, indent + 1).join("\n") if records.length > 0
        ('  ' * indent) + line
      end
    end

    sumry = ''


    summary_fields = self.summary.to_h.keys

    %w(recordx_type schema format_mask).each {|x| summary_fields.delete x}
    sumry = summary_fields.map {|x| x + ': ' + \
                       self.summary.method(x.to_sym).call}.join("\n") + "\n"


    if @raw_header then
      declaration = @raw_header
    else

      smry_fields = %i(schema)              
      if self.delimiter.length > 0 then
        smry_fields << :delimiter 
      else
        smry_fields << :format_mask
      end
      s = smry_fields.map {|x| "%s=\"%s\"" % \
        [x, self.summary.send(x).gsub('"', '\"') ]}.join ' '

      declaration = %Q(<?polyrex %s?>\n) % s
    end

    header = declaration + sumry
    out = build(self.records).join("\n")
    header + "\n" + out
  end

  def to_xslt()    
    @polyrex_xslt.schema = @schema
    @polyrex_xslt.to_xslt
  end

  def xpath(s, &blk)

    if block_given? then
      @doc.root.xpath(s, &blk)
    else
      @doc.root.xpath s
    end
  end

  def xslt_schema=(s)
    @polyrex_xslt.xslt_schema = s
    self
  end

  private

  def refresh_records(records, fields, level)

    records.each do |record|

      level -= 1 unless fields[level]
      fields[level].each {|x| record.method(x).call }

      if record.records.any? then
        refresh_records record.records, fields, level+1
      end
    end

  end

  def polyrex_new(schema)

    # -- required for the parsing feature
    doc = PolyrexSchema.new(schema).to_doc

    fm = doc.root.xpath('//format_mask/text()')
    @format_masks = fm.zip(@format_masks).map{|x,y| y || x }

    schema_rpath = schema.gsub(/\[[^\]]+\]/,'')

    @recordx = schema_rpath.split('/')

    summary = ''
    if @format_masks.length == @recordx.length then
      root_format_mask = @format_masks.shift
      field_names = root_format_mask.to_s.scan(/\[!(\w+)\]/).flatten.map(&:to_sym)
      summary = field_names.map {|x| "<%s/>" % x}.join
    end
    
    summary << "<recordx_type>polyrex</recordx_type><schema>#{schema}</schema>"
    #----
    
    @schema = schema
    @id_counter = '0'

    root_name = @recordx.shift
    ("<%s><summary>%s</summary><records/></%s>" % [root_name, (summary || '') , root_name])

  end
  
  def recordx_map(node)
    # get the summary
    summary = XPath.first(node, 'summary')

    # get the fields
    fields = summary.elements.map do |x|
      next if %w(schema format_mask recordx_type).include? x.name 
      r = x.text.to_s.gsub(/^[\n\s]+/,'').length > 0 ? x.text : x.cdatas.join.strip
      REXML::Text::unnormalize(r)
    end

    # get the records
    records = XPath.first(node, 'records')
    a = records.elements.map {|x| recordx_map x}
    
    [fields, a]
  end
  
  def string_parse(buffer, options={})

    @raw_header = buffer.slice!(/<\?polyrex[^>]+>/)
    
    if @raw_header then
      header = @raw_header[/<?polyrex (.*)?>/,1]
      a = header.scan(/\w+\=["'][^"']+["']/).map do |x| 
        r = x.split(/=/)
        [(r[0] + "=").to_sym, r[1][/^["'](.*)["']$/,1]]
      end

      if options[:schema] then
        a.delete a.assoc(:schema)
        self.method(:schema=).call(options[:schema])
      end

      a.each do |name, value|
        unless options.keys.include? name[0..-2].to_sym then
          self.method(name).call(value) 
        end
      end
    end

    raw_lines = buffer.strip.split(/\r?\n|\r(?!\n)/)    

    raw_summary = schema[/^\w+\[([^\]]+)/,1]

    if raw_summary then
      a_summary = raw_summary.split(',').map(&:strip)

      while raw_lines.first[/#{a_summary.join('|')}:\s+\w+/] do      

        label, val = raw_lines.shift.match(/(\w+):\s+([^$]+)$/).captures              
        @summary.send((label + '=').to_sym, val)
      end

    end

    if @type == 'checklist' then
      
      @format_masks[1..-1].each do |fm|
        fm.sub!(/\s(\[[^\[]+\]$)/,'999999999\1')
      end
    end
    
    @summary.format_mask = @format_masks

    records = @parent_node.root
    @parent_node = records.parent
    records.delete
    @parent_node.root.add format_line!( LineTree.new(raw_lines.join("\n").strip).to_a)

  end  

  def load_handlers(schema)

    @create = PolyrexCreateObject.new(schema, id: @id_counter)
    objects = PolyrexObjects.new(schema)    
    h = objects.to_h

    @objects = h.inject({}){|r,x| r.merge x[0].downcase => x[-1]}

    @objects_a = objects.to_a
    attach_create_handlers(@objects.keys)
    #attach_edit_handlers(@objects)    

  end
  
  def format_line!(a, i=0)

    records = Rexle::Element.new('records')

    a.each do |x|          

      unless @recordx[i] then
        @recordx[i] = @recordx[-1].clone
        @format_masks[i] = @format_masks[-1]
      end

      tag_name = @recordx[i].to_s
      line = raw_line = x.shift


      line = raw_line
      
      if line[/\w+\s*---/] then

        node_name = line.sub(/\s*---/,'')
        ynode = Rexle::Element.new(node_name).add_text("---\n" + x.join("\n"))
        
        summary.add ynode
        next
      end

      unless @format_masks[i][/^\(.*\)$/] then

        @field_names, field_values = RXRawLineParser.new(format_masks[i])\
                                                            .parse(line)
        
      else

        format_masks = @format_masks[i][1..-2].split('|')
        patterns = format_masks.map do |x|
          regexify_fmask(x) #.sub(/\[/,'\[').sub(/\]/,'\]')
        end

        pattern = patterns.detect {|x| line.match(/#{x}/)}
        i = patterns.index(pattern)
        
        @field_names =  format_masks[i].to_s.scan(/\[!(\w+)\]/)\
                                              .flatten.map(&:to_sym)

        field_values = line.match(/#{pattern}/).captures        
        
      end

      @id_counter.succ!

      record = Rexle::Element.new(tag_name)

      record.add_attribute(id: @id_counter.clone)
      summary = Rexle::Element.new('summary')
      
      
      @field_names.zip(field_values).each do |name, value|  
        field =  Rexle::Element.new(name.to_s)
        field.text = value        
        summary.add field
      end

      format_mask = @format_masks[i]

      if @type == 'checklist' then
        format_mask = format_mask.sub(/999999999/,' ')
      end

      schema = "%s[%s]" % [tag_name, @field_names.join(', ')]
      summary.add Rexle::Element.new('format_mask').add_text(format_mask)
      summary.add Rexle::Element.new('schema').add_text(schema)
      summary.add Rexle::Element.new('recordx_type').add_text('polyrex')
      
      record.add summary
      child_records = format_line!(x, i+1) #jr071213 unless x.empty?

      record.add child_records
      records.add record
    end

    records
  end
  
  # -- end of full text edit methods

  def attach_create_handlers(names)
    methodx = names.map do |name|
%Q(
  def create_#{name.downcase}(params) 
    self.create.#{name.downcase}
  end
)
    end

    self.instance_eval(methodx.join("\n"))
    
  end
  
  def attach_edit_handlers(objects)
    objects.keys.each do |name|
    self.instance_eval(
%Q(
  def #{name.downcase}()     
    @objects['#{name}'].new(@parent_node, id: @id)
  end
))
    end
    
  end
  
  def openx(s)

    if s[/</] # xml
      buffer = s
    elsif s[/\[/] then  # schema
      buffer = polyrex_new s
    elsif s[/^https?:\/\//] then  # url
      buffer = open(s, 'UserAgent' => 'Polyrex-Reader'){|x| x.read}
    else # local file
      buffer = File.open(s,'r').read
      @local_filepath = s
    end

    buffer.gsub!(/<schema>[^<]+/, '<schema>' + @schema) if @schema

    @doc = Rexle.new buffer

    schema = @doc.root.text('summary/schema')
    
    if schema.nil? then
      schema = PolyrexSchema.new.parse(buffer).to_schema 
      e = @doc.root.element('summary')
      e.add Rexle::Element.new('schema').add_text(schema)
    end
    

    unless @format_masks
      schema_rpath = schema.gsub(/\[[^\]]+\]/,'')
      @recordx = schema_rpath.split('/')
      @recordx.shift
    end

    id = @doc.root.xpath('max(//@id)')
    @id_counter = id.to_s.succ if id
    
    if schema then
      load_handlers(schema)
      load_find_by(schema) unless schema[/^\w+[^\/]+\/\{/]
    end

    @parent_node = @doc.root.element('records')

  end
      
  def regexify_fmask(f)

    a = f.split(/(?=\[!\w+\])/).map do |x|

      aa = x.split(/(?=[^\]]+$)/)

      if aa.length == 2 and aa.first[/\[!\w+\]/] then
        field, delimiter = *aa
        delimiter ||= '$'
        d = delimiter[0]
        "('[^']+'|[^%s]+)%s" % ([d] * 2)
      else
        x.sub(/\[!\w+\]/,'(.*)')
      end
    end

    a.join            
  end
  
  def tail_map(a)
    [a] + (a.length > 1 ? tail_map(a[0..-2]) : [])
  end
  

  def load_find_by(schema)  
    a = PolyrexObjectMethods.new(schema).to_a

    methodx = a.map do |class_name, methods| 
      class_name.downcase!
      methods.map do |method_name| 
        xpath = %Q(@doc.root.element("//%s[summary/%s='\#\{val\}']")) % [class_name, method_name]
        "def find_by_#{class_name}_#{method_name}(val) 
          @parent_node = #{xpath}
          @parent_node ? @objects['#{class_name}'].new(@parent_node, id: @id) : nil
        end"
      end 
    end

    self.instance_eval methodx.join("\n")
  end


  def refresh_summary()
    summary = @doc.root.element('summary')    
    @summary.to_h.each do |k,v| 
      e = summary.element(k.to_s)
      if e then
        e.text = v
      else
        summary.add Rexle::Element.new(k.to_s).add_text(v)        
      end
    end
  end

end
